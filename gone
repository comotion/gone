#!/bin/sh
# ex: ft=sh expandtab tabstop=3
# yes the shell
#
# bottom up is better than top down

usage() {
   echo "usage: $0 <sign|apply|check|help|module>" >&2
   exit 1
}

help() {
   echo "Apply a gone configuration to the host"
   echo
   echo "usage: $0 [opts= <command> [<pkgs>,..]"
   echo
   echo "Commands:"
   echo "========="
   echo " sign     Generate manifests and sign"
   echo " apply    Apply a configuration"
   echo " check    Validate manifests and signatures"
   echo " help     Shows this help text"
   echo
   echo "General Options:"
   echo "================"
   echo
   echo " -h, --help"
   echo "     Show this help text"
   echo
   echo " -q, --quite"
   echo "     Display minimal output"
   echo
   echo " -v, --verbose"
   echo "     Increase verbosity level (takes multiple)"
   echo
   echo " -d, --dry-run"
   echo "     Just pretend, won't change anything"
   echo
   echo " -m, --hash-methods method1 [method2] ..."
   echo "     Set allowed hash methods"
	echo
	echo
   echo "Sign options:"
   echo "============="
   echo " If required, additional options can be passed to GPG by using"
   echo " the GPG_OPTS environemental variable"
   echo
   echo " -n, --no-gpg"
   echo "     Don't sign the package"

   echo " --sign-with key>"
   echo "     Sign using the <key>"
   echo
   echo
   echo "Apply options:"
   echo "============="
   echo
   echo " -i, --ignore-check"
   echo "     Don't perform manifest integrity checks"
   echo
   echo
   echo "Check options:"
   echo "============="
   echo
   echo " -n, --no-gpg"
   echo "     Don't check package signature"
   echo
   echo
   echo "Error codes:"
   echo "============"
   echo "  1   Error in user input"
   echo "  2   Manifest integrity failure"
   echo "  3   Error, integrity check not performed."
   echo "  4   Missing GPG"
   echo "  7   GPG integrity check failed"
}

# Globals, overriden by export
FQDN=${FQDN:-$(hostname -f)}
HOST=${HOST:-$(hostname)}

verbosity=2
cmd=
integrity=yes
sideeffects=yes
sign=yes
signkey=
hashmethods='sha512sum sha384sum sha256sum sha1sum md5sum'
check_filename=manifest
args=""

# Store the synced appliances
[ -z "_GONE_APPLIED" ] && export _GONE_APPLIED=""

# Maybe add to path to allow recursion
command -v gone > /dev/null || PATH=$(cd "$(dirname "$0")" && pwd):$PATH

do_args() {
   _method_buf=""
   while [ "$#" -gt 0 ]; do
      case "$1" in
         -h|--help)
            help
            exit 0
            ;;
         -q|--quiet)
            verbosity=0
            ;;
         -v|--verbose)
            verbosity=$(( verbosity + 1 ))
            ;;
         -d|--dry-run)
            sideeffects=no
            ;;
         -H|--hash-methods)
            shift;
            hashmethods=""
            while [ "$#" -gt 0 ]; do case "$1" in
               -*)
                  break 2;;
               *)
                  if ! command -v "$1" > /dev/null
                  then
                     echo "error: unknown command '$1', can't be used for integrity check";
                     exit 1
                  fi

                  hashmethods="$hashmethods $1"
                  shift ;;
            esac done
            ;;
         -n|--no-gpg)
            sign=no
            ;;
         --sign-with)
            shift
            signkey=$1
            ;;
         -i|--ignore-check)
            integrity=no
            ;;
         -*)
            echo "Unknown argument: $1" >&2
            exit 1
            ;;
         *)
            [ -z "$cmd" ] && cmd=$1 || args="$args $1"
            ;;
      esac
      shift
   done
   [ ! -z "$_method_buf" ] && hashmethods=$_method_buf
}

do_args "$@"
readonly FQDN verbosity cmd integrity sideeffects sign signkey \
   hashmethods check_filename args


foreach() {
   innercmd=$1
   shift;
   for call in "$@"
   do
      $innercmd "$call"
   done
}

log() {
   level=$1
   shift
   if [ $verbosity  -ge "$level" ] || [ "yes" = "$DEBUG" ]; then
      case "$level" in
        -1) echo "        " ;;
         0) echo "[fatal] $@" ;;
         1) echo "  [err] $@" ;;
         2) echo " [info] $@" ;;
         3) echo "  [msg] $@" ;;
         4) echo "  [dbg] $@" ;;
      esac
   fi
}

hd() {
	echo "$1"
}

#### some important functions ... the real red meat  ####

# do integrity check of all available hash methods.
# normally you're only using one method, the safest one you can afford
# contrived to allow you to decide which one(s) when generating the manifest(s)
# just by signing the manifests you want to use.
# someone might have snuck in a file that is missing in the manifest, so only use
# the manifest when applying files.

#
# XXX:
# Do we want to do this the hard way? This needs more than just a manifest:
# there is a multiuser use case for signing some files with a different key.
PASSED=
integrity_check () {
   if [ -z "$(which gpg)" ]; then
      log 1 "gpg not available, can't guarantee integrity" >&2
      exit 4
   fi
   for key in $GPG_KEYS; do
      if [ $verbosity -le 3 ]; then
          gpg --recv-key --quiet "$key" > /dev/null
      elif [ $verbosity -eq 4 ]; then
          gpg --recv-key --quiet "$key"
      else
          gpg --recv-key "$key"
      fi
   done

   # Debian's coreutils are pre-historic, we can't use xargs `dirname`
   # cuss dirname old version of `dirname` only takes single arg
   manifests=$(find . -name 'manifest.*' -exec dirname '{}' \; | sort -u)

   log 4 "verifying manifests w/"$hashmethods
   foreach file_integrity "$manifests"

   if [ -z "$PASSED" ]
   then
      log 1 "integrity check failed, integrity not available" >&2
      exit 3
   fi
}

file_integrity() {
   cd "$1"
   for method in $hashmethods
   do
      file=$check_filename.$method
      if [ -f $file.gpg ]
      then
         # no sense checking if we're missing programs
         if [ -z "$(which $method)" ]
         then
            log 1 "integrity check failed, method '$method' not available" >&2
            continue
         fi

         [ -f $file ] && cp $file /tmp/gone-$file.old
         gpg --yes -q -d $file.gpg > /dev/null || exit 7
         diff /tmp/gone-$file.old $file
         rm /tmp/gone-$file.old

         # ah the shittiness of bash exit codes
         if $method --quiet -c $file
         then
            log 4 "$method: file $1/$file"
            PASSED="$method"
            # only need to check strongest method available, so it's safe to break
            break
         else
            log 1 "$method: file $1/$file  " >&2
            exit 2
         fi
      fi
   done
   cd "$OLDPWD"
}

match_copy() {
# substitute installed copies for version controlled ones
   srcdir=$1
   check_hashmethods=$(shift)
   workdir=$PWD
   if [ -z "$check_hashmethods" ]; then
      # no signature, no manifest
      FILES="$([ -d "$srcdir/files" ] && find -L "$srcdir/files" -type f | sort)"
   else
      # close a loophole by using files from the manifest only
      FILES=$(cut -f 1 -d ' ' --complement | grep '^ \./files/' | sed 's/^ .\/files\///' < manifest.$PASSED)
      [ $? ] && exit 2 # quit on error
   fi

   #â™¯ why the hello not rsync?: b/c diff!
   # files should be relative paths
   for file in $FILES; do
      #target="${file/*\/files\//\//}" 
      target="$(echo "$file" | sed 's/.*\/files\//\//')"
      if [ ! -f "$target" ]
         then
         if [ -d "$(dirname "$target")" ]
         then
            if [ "yes" = $sideeffects ]; then
               log 3 "install target ($file -> $target)"
               cp -a "$file" "$target"
             else
               log 3 "install target ($file -> $target) [dry-run]"
             fi;
         else
            log 1 "not installing $file, no target dir"
         fi
         continue
      fi
      # XXX: remember attribs, uid/gid, extattr and selinux context
      # any and all uniquely definable characteristics of the file
      # problem: bash sux for this :-(
      #stati=`stat -t $file` # terse pickle
      #stato=`stat -t $target` # terse target
      #stata=( $stats ) # an array. arrays suck in dash
      statd=$(stat -c '%a %u %g %C' "$file" 2>/dev/null)
      stats=$(stat -c '%a %u %g %C' "$target" 2>/dev/null)
      attrs=$(lsattr "$target" | awk '{print $1}')

      # compare the pickle with the target
      if [ "$stats" != "$statd" ]; then
         # noncritical failure
         log 2 'pickle and target do not match, check lsattr and ownership'
         log -1 "--- a/$file"
         log -1 "+++ b/$target"
         echo
         log -1 "-$statd"
         log -1 "+$stats"
      fi

      # diff is what's important
      if ! diff -bud "$target" "$file" || [ $? = 2 ]
      then
         if [ -z "$USER_CHOSE" ]
         then
            if [ "yes" = $sideeffects ]; then
                echo "$target $stats $attrs"
                echo " $file.$statd"
                echo "[] $target"
                echo "$file doesn't match local copy, (a)pply, (commit) or [SKIP]?"
                read choose
            else
               log 2 "$file doesn't match local copy [dry-run]"
               choose=ignore
            fi
         else
            choose=$USER_CHOSE
         fi

         case $choose in
            [aA])
               log 3 "overriding target ($file -> $target)"
               cp -a "$file" "$target"
               ;;

            commit)
               log 3 "committing target ($target -> $file)"
               cp -a "$target" "$file"
               git diff "$file"
               git add "$file"
               git commit
               ;;

            ignore)
               ;;

            *)
               echo Skipped
         esac
      fi
   done
   cd "$workdir"
}

generate_manifest() {
   dirs="$@"

	method=$(hd $hashmethods)

   if [ $# -eq 0 ]; then
      dirs=$(find . -type d -name 'files' -exec dirname '{}' \; | sort -r)
   fi

   for dir in $dirs; do
      if [ -d "$dir" ]; then
         log 2 "Generating $method manifest for $dir"
         cd "$dir"
         chksum1=$([ -e "$check_filename.$method" ] &&
            $method "$check_filename.$method" | awk '{print $1}' ||
            echo "(none)")

         find . -type f |
            grep -Pv '^\./(inst|\.|manifest\.|(?:[^/]+/)+files)' | sort |
            xargs "$method" > "$check_filename.$method"

         chksum2=$($method "$check_filename.$method" | awk '{print $1}')

         log 4 "manifest $check_filename.$method/a: $chksum1"
         log 4 "manifest $check_filename.$method/b: $chksum2"

         # Only sign a new manifest IF there have been changes
         if [ "yes" = "$sign" ] && [ "$chksum1" != "$chksum2" ]
         then
            log 2 "Signing $dir/$check_filename.$method.gpg"
            gpg  ${signkey:+--local-user $signkey} --yes --sign $GPG_OPTS "$check_filename.$method"
         fi
         cd "$OLDPWD"
      else
         log 4 "Refusing to generate manifest for '$dir', not a directory"
      fi
   done
}

# off or on by default?
if [ "no" = $integrity ]; then
   check_hashmethods=
else
   check_hashmethods=$hashmethods
fi

sync() {
   echo $_GONE_APPLIED | grep "$1" > /dev/null && return 0

   log 2 "syncing module '$1'"
   if [ -f "$1" ]; then
      $1
      _GONE_APPLIED="$_GONE_APPLIED $1"
   elif [ -d "$1" ]; then
      [ -f "$1/apply" ] && "$1/apply"
      match_copy "$1"
      _GONE_APPLIED="$_GONE_APPLIED $1"
   elif [ -f "modules/$1" -o -d "modules/$1" ]; then
      sync "modules/$1"
   else
      log 1 "package '$1' does not exist"
   fi
}

# Modular hooks, all functions prefixed with 'gone_module_' can be
# registered and called. Add the suffix `_show` and/or `_commit`
# to display the changes and commiting the changes
_gone_modules="module"
gone_module_module() {
   log 4 "adding modules: $@"
   _gone_modules="$_gone_modules $@"
}

gone_module_show() {
   echo "+ modules: $_gone_modules"
   echo

   for mod in $_gone_modules; do
      if command -v "gone_module_${mod}_show"  > /dev/null; then
         echo "+ $mod"
         echo ------------------
         "gone_module_${mod}_show"
         echo
      fi
   done
}


gone_module_gpg() {
   case $1 in
      add|addkey)
         shift
         export GPG_KEYS="$GPG_KEYS $@"
         ;;
      *)
         echo "usage: $0 gpg addkey key1, .., .." >&2
         exit 1
   esac
}

gone_module_gpg_show() {
   for k in $GPG_KEYS; do
      gpginfo=$(gpg --fingerprint "$k" 2> /dev/null | awk '/@/{$1="";print $0}' || echo "unknown key")
      echo " -> $gpginfo ($k)"
   done
}

gone_module_gpg_commit() {
   gpg --recv-keys "$GPG_KEYS"
}

gone_module_clean() {
   find . -type f -name 'manifest.*' -exec rm -v '{}' \;
}

gone_module_apply() {
   for mod in $_gone_modules; do
      if command -v "gone_module_${mod}_commit"  > /dev/null; then
         log 2 "commiting $cmd"
         eval "gone_module_${mod}_commit"
      fi
   done
   foreach sync "$@"
}

alias gone_module_help=help
alias gone_module_sign=generate_manifest
alias gone_module_check=integrity_check

gone() {
   innercmd="$1"
   shift
   if [ -z "$innercmd" ]; then
       usage
       return
   fi

   if echo "$_gone_modules" | grep -q "$innercmd"; then
      log 4 "executing module: \`gone $innercmd $@\`"
      eval "gone_module_$innercmd" "$@"
   else
      if command -v "gone_module_$innercmd" > /dev/null; then
         echo "module '$innercmd' is not registered."
         echo "try to register using with \`gone module $innercmd\`"
      else
         echo "module '$innercmd' was not found...."
         usage
         exit 1
      fi
   fi
}

gone module apply sign check show clean help gpg

while read -m inc .goneinclude 2>/dev/null; do
#for inc in $(cat .goneinclude 2> /dev/null); do
   log 4 "including $inc"
   . "$inc"
done

if echo "$0" | grep -qP '^(?:\./)?gone$'; then
   log 4 "calling gone directly"
   gone "$cmd" "$args"
fi
